<?php
/**
 * Created by PhpStorm.
 * User: x_l
 * QQ:99628038
 * Date: 2016/12/26
 * Time: 15:08
 */
namespace common\models\tool;

use common\components\behaviors\ImageDeal;
use lbmzorx\components\event\UploadEvent;
use Yii;
use common\components\tools\Gd;
use yii\base\Exception;
use yii\base\Model;
use yii\base\ModelEvent;

class UploadFile extends Model
{
    /**
     * @var string
     */
    public $uploadServer='/upload/';
    public static $uploadServerPath='@frontend/web/upload/';
   
    /**
     * @var \yii\web\UploadedFile $uploadFile
     */
    public $uploadFile;

    public $path;           //图片分类目录
    public $name;           //图片名字
    public $outName;        //图片的物理地址名
    public $urlName;        //图片的url名

    public function rules()
    {
        return [
            [['uploadFile'],'file','skipOnEmpty'=>false, 'extensions'=>'png,jpg','maxSize' => 3*1048576,
                'mimeTypes'=>['image/jpeg','image/png','image/jpg'],
            ],
        ];
    }

    public function behaviors()
    {
        return [
        ]; // TODO: Change the autogenerated stub
    }

    public function upload()
    {
        if ($this->validate()) {
            $this->getFullPath();
            $name=$this->getFullFile();
            if(!$this->beforeUpload()){
                return false;
            }
            try{
                $this->uploadFile->saveAs($name);
                if(!$this->successUpload()){
                    return false;
                }
            }catch (Exception $e){
                $this->addError('uploadFile',$e->getMessage());
                $this->failedUpload();
            }
            if(!$this->afterUpload()){
                return false;
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * 获取文件名
     * @return mixed
     */
    public function getName(){
        if($this->name==''){
            $key=$this->generateNameKey();
            $key.=microtime().rand(1,9999999);//随便写的加密KEY
            $this->name = md5( $key );
        }
        return $this->name;
    }

    protected function generateNameKey(){
        return 's29vbFsJfj'.\yii::$app->security->generateRandomString();
    }

    /**
     * 设置文件名
     * @param string $name
     */
    public function setName($name=''){
        if($name==''){
            $name=$this->getName();
        }
        return $name;
    }

    public function getPath(){
        if($this->path == ''){
            $this->path = 'img';
        }
        return $this->path;
    }

    public function setPath($path=''){
        if($path==''){
            $path = $this->getPath();
        }
        return $path;
    }

    public function getFullPath(){
        $path=Yii::getAlias(static::$uploadServerPath.$this->getPath());
        if(! is_dir($path)){
            mkdir($path, 0755, true);
        }
        return $path;
    }

    public function getFullFile(){
        return Yii::getAlias(static::$uploadServerPath.$this->getOutName());
    }

    public function setUrlName(){
        $this->urlName=$this->imgServer.$this->getOutName();
    }

    public function getOutName(){
        if(!$this->outName){
            $this->outName=$this->getPath().'/'.$this->getName().'.'.$this->uploadFile->extension;
        }
        return $this->outName;
    }

    /**
     * 设置上传后文件名包括路径与拓展名
     * @param string $name
     */
    public function setOutName($outName=''){
        if($outName==''&&$this->outName==''){
            $this->outName= $this->getPath().'/'.$this->getName(). '.' . $this->uploadFile->extension;
        }else{
            if($outName){
                $this->outName=$outName;
            }
        }
    }

    public function getUrlName(){
        return $this->imgServer.$this->outName;
    }

    public function beforeUpload(){
        $event = new UploadEvent;
        $this->trigger(UploadEvent::EVENT_BEFORE_UPLOAD, $event);
        return $event->isValid;
    }

    public function successUpload(){
        $event = new UploadEvent;
        $this->trigger(UploadEvent::EVENT_SUCCESS_UPLOAD, $event);
        return $event->isValid;
    }

    public function failedUpload(){
        $event = new ModelEvent;
        $this->trigger(UploadEvent::EVENT_FAILED_UPLOAD, $event);
        return $event->isValid;
    }

    public function afterUpload(){
        $event = new UploadEvent;
        $this->trigger(UploadEvent::EVENT_AFTRE_UPLOAD, $event);
        return $event->isValid;
    }
}