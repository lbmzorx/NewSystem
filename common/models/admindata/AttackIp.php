<?php
namespace common\models\admindata;

use Yii;
use common\models\admindatabase\AttackIp as BaseModelAttackIp;
use yii\caching\TagDependency;

/**
* This is the data class for [[common\models\admindatabase\AttackIp]].
* Data model definde model behavior and status code.
* @see \common\models\admindatabase\AttackIp
*/
class AttackIp extends BaseModelAttackIp
{
    /**
     * The cache tag
     */
    const CACHE_TAG='common_models_admindata_AttackIp';


    const IS_LIMIT_NO=0;
    const IS_LIMIT_YES=1;
    /**
    * 是否限制
    * 是否限制.tran:0=否,1=是.code:0=No,1=Yes
    * @var array $is_limit_code
    */
    public static $is_limit_code = [0=>'No',1=>'Yes',];

    /**
     * get status code attribute list
     */
    public static function statusCodes(){
        return [
            'is_limit'
        ];
    }

    /**
    * @inheritdoc
    */
    public function rules()
    {
        return array_merge(parent::rules(),[
            [['is_limit'], 'in', 'range' => [0,1,]],
            [['is_limit'], 'default', 'value' =>0,],
        ]);
    }

    /**
    * @inheritdoc
    */
    public function scenarios()
    {
        return [
            'default' => [
                'ip',
                'is_limit',
            ],
            'search' => [
                'ip',
                'is_limit',
            ],
            'view' => [
                'ip',
                'is_limit',
            ],
            'update' => [
                'ip',
                'is_limit',
            ],
            'create' => [
                'ip',
                'is_limit',
            ],
        ];
    }

    public function behaviors()
    {
        return [
            'getStatusCode'=>[
                'class' => \lbmzorx\components\behavior\StatusCode::className(),
                'category' =>'astatuscode',
            ],
        ];
    }

    /**
     * If is tree which have parent_id
     * @return boolean
     */
    public static function isTree(){
        return false;
    }


    public function afterSave($insert , $changedAttributes)
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterSave($insert , $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

}
