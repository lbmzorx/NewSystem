<?php
namespace common\models\admindata;

use Yii;
use common\models\admindatabase\YiiLog as BaseModelYiiLog;
use yii\caching\TagDependency;

/**
* This is the data class for [[common\models\admindatabase\YiiLog]].
* Data model definde model behavior and status code.
* @see \common\models\admindatabase\YiiLog
*/
class YiiLog extends BaseModelYiiLog
{
    /**
     * The cache tag
     */
    const CACHE_TAG='common_models_admindata_YiiLog';


    const LEVEL_ALL=0;
    const LEVEL_ERROR=1;
    const LEVEL_WARNING=2;
    const LEVEL_INFO=4;
    const LEVEL_TRACE=8;
    const LEVEL_PROFILE=64;
    const LEVEL_PROFILE_BEGIN=80;
    const LEVEL_PROFILE_END=96;
    /**
    * 级别
    * 级别.tran:0=所有,1=致命错误,2=警告,4=信息,8=追踪,64=PROFILE,80=PROFILE_BEGIN,96=PROFILE_END.code:0=All,1=Error,2=Warning,4=Info,8=Trace,64=PROFILE,80=PROFILE_BEGIN,96=PROFILE_END
    * @var array $level_code
    */
    public static $level_code = [0=>'All',1=>'Error',2=>'Warning',4=>'Info',8=>'Trace',64=>'PROFILE',80=>'PROFILE_BEGIN',96=>'PROFILE_END',];

    /**
     * get status code attribute list
     */
    public static function statusCodes(){
        return [
            'level'
        ];
    }

    /**
    * @inheritdoc
    */
    public function rules()
    {
        return array_merge(parent::rules(),[
            [['level'], 'in', 'range' => [0,1,2,4,8,64,80,96,]],
        ]);
    }

    /**
    * @inheritdoc
    */
    public function scenarios()
    {
        return [
            'default' => [
                'id',
                'level',
                'category',
                'log_time',
                'prefix',
                'message',
            ],
            'search' => [
                'id',
                'level',
                'category',
                'log_time',
                'prefix',
                'message',
            ],
            'view' => [
                'id',
                'level',
                'category',
                'log_time',
                'prefix',
                'message',
            ],
            'update' => [
                'level',
                'category',
                'log_time',
                'prefix',
                'message',
            ],
            'create' => [
                'level',
                'category',
                'log_time',
                'prefix',
                'message',
            ],
        ];
    }

    public function behaviors()
    {
        return [
            'getStatusCode'=>[
                'class' => \lbmzorx\components\behavior\StatusCode::className(),
                'category' =>'astatuscode',
            ],
        ];
    }

    /**
     * If is tree which have parent_id
     * @return boolean
     */
    public static function isTree(){
        return false;
    }


    public function afterSave($insert , $changedAttributes)
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterSave($insert , $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

}
