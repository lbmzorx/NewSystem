<?php
namespace common\models\startdata;

use Yii;
use common\models\startdatabase\UserRemain as BaseModelUserRemain;
use yii\caching\TagDependency;

/**
* This is the data class for [[common\models\startdatabase\UserRemain]].
* Data model definde model behavior and status code.
* @see \common\models\startdatabase\UserRemain
*/
class UserRemain extends BaseModelUserRemain
{
    /**
     * The cache tag
     */
    const CACHE_TAG='common_models_startdata_UserRemain';


    const REMAIN_TYPE_COMMIT=0;
    const REMAIN_TYPE_ANSWER=1;
    const REMAIN_TYPE_REPLY=2;
    const REMAIN_TYPE_COLLECTION=4;
    const REMAIN_TYPE_THUMB_UP=5;
    const REMAIN_TYPE_VISITOR=6;
    const REMAIN_TYPE_FANS=7;
    /**
    * 提醒类型
    * 提醒类型.tran:0=评论,1=回答,2=回复,3=评价,4=收藏,5=点赞,6=访客,7=粉丝.code:0=Commit,1=Answer,2=Reply,4=Collection,5=Thumb Up,6=Visitor,7=Fans.
    * @var array $remain_type_code
    */
    public static $remain_type_code = [0=>'Commit',1=>'Answer',2=>'Reply',4=>'Collection',5=>'Thumb Up',6=>'Visitor',7=>'Fans',];

    /**
     * get status code attribute list
     */
    public static function statusCodes(){
        return [
            'remain_type'
        ];
    }

    /**
    * @inheritdoc
    */
    public function rules()
    {
        return array_merge(parent::rules(),[
            [['remain_type'], 'in', 'range' => [0,1,2,4,5,6,7,]],
            [['to_user_id','from_user_id'], 'default', 'value' =>0,],
        ]);
    }

    /**
    * @inheritdoc
    */
    public function scenarios()
    {
        return [
            'default' => [
                'id',
                'to_user_id',
                'from_user_id',
                'content',
                'remain_type',
                'link',
                'title',
                'add_time',
            ],
            'search' => [
                'id',
                'to_user_id',
                'from_user_id',
                'content',
                'remain_type',
                'link',
                'title',
                'add_time',
            ],
            'view' => [
                'id',
                'to_user_id',
                'from_user_id',
                'content',
                'remain_type',
                'link',
                'title',
                'add_time',
            ],
            'update' => [
                'to_user_id',
                'from_user_id',
                'content',
                'remain_type',
                'link',
                'title',
            ],
            'create' => [
                'to_user_id',
                'from_user_id',
                'content',
                'remain_type',
                'link',
                'title',
            ],
        ];
    }

    public function behaviors()
    {
        return [
            'timeUpdate'=>[
                'class' => \yii\behaviors\TimestampBehavior::className(),
                'attributes' => [
                    self::EVENT_BEFORE_INSERT => ['add_time'],
                ],
            ],
            'getStatusCode'=>[
                'class' => \lbmzorx\components\behavior\StatusCode::className(),
                'category' =>'statuscode',
            ],
        ];
    }




    /**
     * If is tree which have parent_id
     * @return boolean
     */
    public static function isTree(){
        return false;
    }


    public function afterSave($insert , $changedAttributes)
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterSave($insert , $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

}
