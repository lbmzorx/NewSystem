<?php
namespace common\models\startdata;

use lbmzorx\components\helper\ModelHelper;
use Yii;
use common\models\startdatabase\ArticleCollection as BaseModelArticleCollection;
use yii\caching\TagDependency;

/**
* This is the data class for [[common\models\startdatabase\ArticleCollection]].
* Data model definde model behavior and status code.
* @see \common\models\startdatabase\ArticleCollection
*/
class ArticleCollection extends BaseModelArticleCollection
{
    /**
     * The cache tag
     */
    const CACHE_TAG='common_models_startdata_ArticleCollection';


    /**
     * get status code attribute list
     */
    public static function statusCodes(){
        return [
        ];
    }

    /**
    * @inheritdoc
    */
    public function rules()
    {
        return array_merge(parent::rules(),[
        ]);
    }

    /**
    * @inheritdoc
    */
    public function scenarios()
    {
        return [
            'default' => [
                'id',
                'article_id',
                'user_id',
                'add_time',
            ],
            'search' => [
                'id',
                'article_id',
                'user_id',
                'add_time',
            ],
            'view' => [
                'id',
                'article_id',
                'user_id',
                'add_time',
            ],
            'update' => [
                'article_id',
                'user_id',
            ],
            'create' => [
                'article_id',
                'user_id',
            ],
        ];
    }

    public function behaviors()
    {
        return [
            'timeUpdate'=>[
                'class' => \yii\behaviors\TimestampBehavior::className(),
                'attributes' => [
                    self::EVENT_BEFORE_INSERT => ['add_time'],
                ],
            ],
            'withOneUser'=>[
                'class' => \lbmzorx\components\behavior\WithOneUser::className(),
                'userClass'=> User::ClassName(),
            ],
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getArticle(){
        return $this->hasOne(Article::className(),['id'=>'article_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser(){
        return $this->hasOne(User::className(),['id'=>'user_id']);
    }

    /**
     * get relation columns
     * @return array
     */
    public static function columnRetions(){
        return [
            'article_id'=>'Article',
            'user_id'=>'User',
        ];
    }

    /**
     * If is tree which have parent_id
     * @return boolean
     */
    public static function isTree(){
        return false;
    }


    public function afterSave($insert , $changedAttributes)
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterSave($insert , $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        TagDependency::invalidate(\yii::$app->cache,self::CACHE_TAG);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * user collection or cancel
     * @param integer $article_id
     * @param integer $user_id
     * @return array
     */
    public static function UserCollection($article_id,$user_id){
        if(!$article_id || !$user_id){
            return ['status'=>false,'msg'=>\yii::t('app','Parameters Error!')];
        }
        $article=Article::findOne([
            'id'=>$article_id,
            'status'=>Article::STATUS_AUDIT_PASSED,
            'auth'=>Article::AUTH_ALL_USERS,
        ]);
        if(!$article){
            return ['status'=>false,'msg'=>\yii::t('app','Article not Exist!')];
        }
        $db=static::getDb();
        $t=$db->beginTransaction();
        if($collection=self::findOne(['article_id'=>$article_id,'user_id'=>$user_id])){
            if($article && $collection->delete()!==false&&$article->updateCounters(['collection'=>-1])!==false ){
                $t->commit();
                return ['status'=>true,'msg'=>\yii::t('app','Collection success cancel!'),'collection'=>$article->collection,'action'=>-1];
            }else{
                $t->rollBack();
                $msg='';
                if($collection->hasErrors()){
                    $msg=ModelHelper::getErrorAsString($collection,$collection->getErrors());
                }
                if($article->hasErrors()){
                    $msg.=ModelHelper::getErrorAsString($article,$article->getErrors());
                }
                return ['status'=>false,'msg'=>$msg,];
            }
        }else{
            $collection=new ArticleCollection();
            $collection->setScenario('create');
            $collection->load(['article_id'=>$article_id,'user_id'=>$user_id],'');
            if($article->updateCounters(['collection'=>1])&& $collection->save()){
                $t->commit();
                return ['status'=>true,'msg'=>\yii::t('app','Collection Success!'),'collection'=>$article->collection,'action'=>1];
            }else{
                $t->rollBack();
                $msg='';
                if($collection->hasErrors()){
                    $msg=ModelHelper::getErrorAsString($collection,$collection->getErrors());
                }
                if($article->hasErrors()){
                    $msg.=ModelHelper::getErrorAsString($article,$article->getErrors());
                }
//                return ['status'=>false,'msg'=>$msg,];
                return ['status'=>false,'msg'=>\yii::t('app','Collection Failed!')];
            }
        }
    }

}
