<?php
/**
 * Created by Administrator.
 * Date: 2018/6/10 19:07
 * github: https://github.com/lbmzorx
 */

namespace common\components\behavior;

use common\models\startdata\User;
use common\models\startdata\UserFans;
use common\models\startdata\UserInfo;
use common\models\startdata\UserMessage;
use common\models\startmq\QtMessageForm;
use lbmzorx\components\helper\ModelHelper;
use yii\base\Behavior;
use yii\base\Exception;
use yii\helpers\Url;
use yii\helpers\VarDumper;

class UpdataFans extends Behavior
{
    public $attention_id;
    public $fans_id;

    public function events()
    {
        return [
            UserFans::EVENT_FOLLOWING=>'following',
            UserFans::EVENT_CANCEL_FOLLOWING=>'cancelfollowing',
        ]; // TODO: Change the autogenerated stub
    }

    public function queueFollow($event){

    }

    public function following($event){
        $model=$event->sender;
        $this->attention_id=$model->attention_id;
        $this->fans_id=$model->fans_id;


        $db=UserInfo::getDb();
        $userAttension=User::findOne($this->attention_id);
        $t=$db->beginTransaction();

        $attention=UserInfo::findOne(['user_id'=>$this->attention_id]);
        if($attention){
            $attention->updateCounters(['fans'=>1]);
        }else{
            $attention=new UserInfo();
            $attention->setScenario('create');
            $attention->loadDefaultValues();
            $attention->user_id=$this->attention_id;
            $attention->fans=1;
            if(!$attention->save()){
                $t->rollBack();
                $model->addError('attention_id',ModelHelper::getErrorAsString($attention,$attention->getErrors()));
                throw new Exception(VarDumper::dumpAsString($attention->getErrors()));
                return false;
            }
        }

        $fans=UserInfo::findOne(['user_id'=>$this->fans_id]);
        if($fans){
            $fans->updateCounters(['attention'=>1]);
        }else{
            $fans=new UserInfo();
            $fans->setScenario('create');
            $fans->loadDefaultValues();
            $fans->user_id=$this->attention_id;
            $fans->attention=1;
            if(!$fans->save()){
                $t->rollBack();
                $model->addError('attention_id',ModelHelper::getErrorAsString($fans,$fans->getErrors()));
                throw new Exception(VarDumper::dumpAsString($fans->getErrors()));
                return false;
            }
        }
        $t->commit();

        $qt=new QtMessageForm();
        $qt->send_id=\yii::$app->user->id;
        $qt->to_id=$this->attention_id;
        $qt->priority=UserMessage::PRIORITY_SUCCESS;
        $qt->send_type=UserMessage::SEND_TYPE_USER;
        $qt->is_link=UserMessage::IS_LINK_YES;
        $qt->link=Url::to(['/user/index','id'=>\yii::$app->user->id]);
        $qt->content=\yii::$app->user->identity->username.' '.UserMessage::messsageTypeTemplate(UserMessage::MESSAGE_TYPE_FOLLOWING).' '.\yii::t('app','you');
        $qt->add_time=time();
        $qt->group_type=UserMessage::GROUP_TYPE_PERSONAL;
        $qt->message_type=UserMessage::MESSAGE_TYPE_FOLLOWING;
        $qt->user_message_group_content_id=0;

        if(!$qt->sendRabbit()){
            throw new Exception(VarDumper::dumpAsString($qt->getErrors()));
        }


        $qt->send_id=$this->attention_id;
        $qt->to_id=\yii::$app->user->id;
        $qt->link=Url::to(['/user/index','id'=>$this->attention_id]);
        $qt->content=\yii::t('app','I').' '.UserMessage::messsageTypeTemplate(UserMessage::MESSAGE_TYPE_FOLLOWING).' '.$userAttension->username;
        $qt->add_time=time();
        $qt->message_type=UserMessage::MESSAGE_TYPE_FANS;

        if(!$qt->sendRabbit()){
            throw new Exception(VarDumper::dumpAsString($qt->getErrors()));
        }

    }


    public function cancelfollowing($event){
        $model=$event->sender;
        $this->attention_id=$model->attention_id;
        $this->fans_id=$model->fans_id;

        $db=UserInfo::getDb();
        $userAttension=User::findOne($this->attention_id);
        $t=$db->beginTransaction();

        $attention=UserInfo::findOne(['user_id'=>$this->attention_id]);
        if($attention){
            $attention->updateCounters(['fans'=>-1]);
        }else{
            $attention=new UserInfo();
            $attention->setScenario('create');
            $attention->loadDefaultValues();
            $attention->user_id=$this->attention_id;
            $attention->fans=0;
            if(!$attention->save()){
                $t->rollBack();
                $model->addError('attention_id',ModelHelper::getErrorAsString($attention,$attention->getErrors()));
                \yii::$app->session->setFlash(ModelHelper::getErrorAsString($attention,$attention->getErrors()));
                throw new Exception(VarDumper::dumpAsString($attention->getErrors()));
                return false;
            }
        }

        $fans=UserInfo::findOne(['user_id'=>$this->fans_id]);
        if($fans){
            $fans->updateCounters(['attention'=>-1]);
        }else{
            $fans=new UserInfo();
            $fans->setScenario('create');
            $fans->loadDefaultValues();
            $fans->user_id=$this->attention_id;
            $fans->fans=0;
            if(!$fans->save()){
                $t->rollBack();
                $model->addError('attention_id',ModelHelper::getErrorAsString($fans,$fans->getErrors()));
                throw new Exception(VarDumper::dumpAsString($fans->getErrors()));
                return false;
            }
        }
        $t->commit();

        $qt=new QtMessageForm();
        $qt->send_id=\yii::$app->user->id;
        $qt->to_id=$this->attention_id;
        $qt->priority=UserMessage::PRIORITY_SUCCESS;
        $qt->send_type=UserMessage::SEND_TYPE_USER;
        $qt->is_link=UserMessage::IS_LINK_YES;
        $qt->link=Url::to(['/user/index','id'=>\yii::$app->user->id]);
        $qt->content=\yii::$app->user->identity->username.' '.\yii::t('app','has canceled to').' '.UserMessage::messsageTypeTemplate(UserMessage::MESSAGE_TYPE_FOLLOWING).' '.\yii::t('app','you');
        $qt->add_time=time();
        $qt->group_type=UserMessage::GROUP_TYPE_PERSONAL;
        $qt->message_type=UserMessage::MESSAGE_TYPE_FOLLOWING;
        $qt->user_message_group_content_id=0;
        if(!$qt->sendRabbit()){
            throw new Exception(VarDumper::dumpAsString($qt->getErrors()));
        }


        $qt->send_id=$this->attention_id;
        $qt->to_id=\yii::$app->user->id;
        $qt->link=Url::to(['/user/index','id'=>$this->attention_id]);
        $qt->content=\yii::t('app','I').' '.\yii::t('app','has canceled to').' '.UserMessage::messsageTypeTemplate(UserMessage::MESSAGE_TYPE_FOLLOWING).' '.$userAttension->username;
        $qt->add_time=time();
        $qt->message_type=UserMessage::MESSAGE_TYPE_FANS;
        if(!$qt->sendRabbit()){
            throw new Exception(VarDumper::dumpAsString($qt->getErrors()));
        }


    }

}