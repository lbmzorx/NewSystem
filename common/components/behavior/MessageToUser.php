<?php
/**
 * Created by Administrator.
 * Date: 2018/6/20 20:42
 * github: https://github.com/lbmzorx
 */
namespace common\components\behavior;

use yii\base\Behavior;
use yii\base\InvalidParamException;
use yii\db\ActiveRecord;
use yii\queue\closure\Job;

class MessageToUser extends Behavior
{
    public $user_id;
    public $job;
    public $jobParams=[];
    public $eventItems=[];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if(empty($this->eventItems)){
            throw new InvalidParamException('Please config Events');
        }
    }

    public function events(){
        $events=[];
        foreach ($this->eventItems as $event){
            $events[$event]='broadcastMessage';
        }
        return $events;
    }

    public function broadcastMessage($event){
        /**
         * @var $model ActiveRecord
         */
        $model=$event->sender;
        $this->jobParams=$this->getJobParams($model);

        if($this->job instanceof \Closure){
            $job=call_user_func($this->job,$this->jobParams);
        }elseif(is_string($this->job) && class_exists($this->job)){
            $this->jobParams=array_merge(['class'=>$this->job]);
            $job = \yii::CreateObject($this->jobParams);
        }elseif($this->job instanceof Job){
            $job=$this->job;
        }else{
            throw new InvalidParamException("Invalid job parameters!");
        }

        \yii::$app->rabbitqueue->push($job);

    }

    protected function getJobParams($model){
        if($this->jobParams){
            $jobParams=[];
            foreach ($this->jobParams as $key=>$params){
                if($params instanceof \Closure){
                    $jobParams[$key]=call_user_func($params,$model);
                }else{
                    $jobParams[$key]=$params;
                }
            }
            return $jobParams;
        }
        return [];
    }

}