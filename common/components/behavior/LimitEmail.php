<?php
namespace common\components\behavior;

use Yii;
use common\components\event\EmailEvent;
use yii\base\Behavior;
use yii\log\Logger;
use yii\web\BadRequestHttpException;
use yii\web\HttpException;

/**
 * Created by Administrator.
 * Date: 2018/5/26 15:48
 * github: https://github.com/lbmzorx
 */
class LimitEmail extends  Behavior
{
    const TAG_EMAIL='EMAIL_TAG_TRAN';

    public $category='app';
    public $maxCount=10;
    public $spaceBetweenMail=60; //10 minute

    public $attribute='email';
    /**
     * expire to remove limit account
     * @var $expire
     */
    public $expire;

    public function events()
    {
        return [
            EmailEvent::EVENT_BEFORE_EMAIL=>'beforeEmail',
            EmailEvent::EVENT_SUCCESS_EMAIL=>'failedEmail',
            EmailEvent::EVENT_FAILED_EMAIL=>'successEmail',
            EmailEvent::ENENT_AFTER_EMAIL=>'afterEmail',
        ]; // TODO: Change the autogenerated stub
    }

    public function getIpKey(){
        return $this->prefix.\yii::$app->request->userIP;
    }

    public function beforeEmail($event){
        $model=$event->sender;
        $key=[$this->getIpKey(),self::TAG_EMAIL];
        if($msg=Yii::$app->cache->get($key)&&isset($msg['count'])&&isset($msg['expire'])&& $msg['expire']>time()){
            if( $msg['count']<=$this->maxErrorCount ){
                if($msg['spaceMinute']>time()){
                    $msg=yii::t($this->category,'Your Operation is too frequent ,please wait {time}s',['time'=>$msg['spaceMinute']-time()]);
                    \yii::$app->getSession()->setFlash('warning',$msg);
                    /**
                     * @var $model \yii\base\Model
                     */
                    $model->addError($this->attribute,$msg);
                    throw new HttpException(200,$msg);
                }
            }else{
                $msg=yii::t($this->category,'We have send more than {count} emails,please don\'t register again!',['count'=>$this->maxCount]);
                \yii::$app->getSession()->setFlash('error',$msg);
                /**
                 * @var $model \yii\base\Model
                 */
                $model->addError($this->attribute,$msg);
                $msg='IP:'.\yii::$app->request->userIP.' key='.serialize($key).' Event=Email over Sand , More then '.$this->maxCount.'.';
                \yii::$app->log->logger->log($msg,Logger::LEVEL_ERROR);
                throw new BadRequestHttpException($msg);
            }
        }else{
            $msg=[
                'count'=>1,
                'spaceMinute'=>time()+$this->spaceBetweenMail,
                'expire'=>strtotime(date('Y-m-d',strtotime('+1 day'))),
            ];
            Yii::$app->cache->set($key,$msg,86400);
        }
    }

    public function successEmail($event){
        $key=[$this->getIpKey(),self::TAG_EMAIL];
        if($msg=\yii::$app->cache->get($key) && isset($msg['count']) && isset($msg['spaceMinute'])){
            $msg['count']=$msg['count']+1;
            $msg['spaceMinute']=time()+$this->spaceBetweenMail;
            $msg['expire']=isset($msg['expire'])?$msg['expire']:strtotime(date('Y-m-d',strtotime('+1 day')));
        }else{
            $msg=[
                'count'=>1,
                'spaceMinute'=>time()+$this->spaceBetweenMail,
                'expire'=>strtotime(date('Y-m-d',strtotime('+1 day'))),
            ];
            Yii::$app->cache->set($key,$msg,86400);
        }
    }

    public function failedEmail($event){

    }

    public function afterEmail($event){

    }

}