<?php
/**
 * Created by Administrator.
 * Date: 2018/6/9 21:20
 * github: https://github.com/lbmzorx
 */

namespace frontend\controllers;


use backend\models\Article;
use common\models\startdata\UserInfo;
use common\models\startdata\UserMessage;
use frontend\models\FansForm;
use lbmzorx\components\action\AjaxFormAction;
use lbmzorx\components\helper\ModelHelper;
use yii\base\Controller;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Response;

class UserController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['index','attention','chat','message','message-status'],
                        'allow' => false,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' =>  ['index','attention','chat','message','message-status'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'index'   => ['GET'],
                    'chat' => ['GET', 'PUT', 'POST'],
                    'attention' => ['GET','PUT', 'POST'],
                    'collection' => ['PUT', 'POST'],
                    'message'=>['GET'],
                    'message-status'=>['PUT','POST'],
                ],
            ],
        ];
    }

    public function actions()
    {
        return [
            'attention'=>[
                'class'=>AjaxFormAction::className(),
                'modelClass'=>FansForm::className(),
                'verifyMethod'=>'fans',
                'successMsg'=>function($model,$action){
                    if($model->getAttentionType()){
                        return \yii::t('app','Following Success!');
                    }else{
                        return \yii::t('app','Unfollow  Success!');
                    }
                },
                'isErrorMsg'=>true,
                'errorMsg'=>\yii::t('app','Following Failed!'),
            ],
            'reset-password'=>[

            ],
        ]; // TODO: Change the autogenerated stub
    }

    public function actionIndex(){
        $user=\yii::$app->request->get('id')?:\yii::$app->user->id;
        $query=Article::find()->where([
            'publish'=>Article::PUBLISH_PUBLISHED,
            'auth'=>Article::AUTH_ALL_USERS,
            'user_id'=>$user,
        ])->andFilterWhere([
            'tag'=>\yii::$app->request->get('tag'),
            'article_cate_id'=>\yii::$app->request->get('cate_id'),
        ])->with('user');

        if(\yii::$app->user->id==$user){
            $query->andWhere(['status'=>[
                Article::STATUS_AUDIT_PASSED,
                Article::STATUS_AUDIT_FAILED,
                Article::STATUS_WAITING_AUDIT,
            ]]);
        }else{
            $query->andWhere(['status'=>Article::STATUS_AUDIT_PASSED,]);
        }

        $provider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 20,
                'pageParam'=>'page',
                'pageSizeParam'=>'per-page',
            ],
            'sort' => [
                'defaultOrder' => [
                    'sort' => SORT_DESC,
                    'id' => SORT_DESC,
                ]
            ],
        ]);
        return $this->render('index',['provider'=>$provider]);
    }


    public function actionMessage(){
        $query=UserMessage::find()->where([
            'status'=>UserMessage::STATUS_AUDIT_PASS,
            'to_id'=>\yii::$app->user->id,
        ])->andFilterWhere([
            'message_type'=>\yii::$app->request->get('type'),
        ]);
        $provider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 20,
                'pageParam'=>'page',
                'pageSizeParam'=>'per-page',
            ],
            'sort' => [
                'defaultOrder' => [
                    'id' => SORT_DESC,
                ]
            ],
        ]);
        return $this->render('message',['provider'=>$provider]);
    }

    public function actionMessageStatus(){
        \yii::$app->response->format=Response::FORMAT_JSON;
        $id=\yii::$app->request->post('id');
        if(is_numeric($id)){
            $message=UserMessage::findOne([
                'id'=>$id,
                'to_id'=>\yii::$app->user->id,
                'status'=>UserMessage::STATUS_AUDIT_PASS,
            ]);
            $message->read=UserMessage::READ_READ;
            if($message->save()){
                return ['status'=>true,'msg'=>''];
            }else{
                return ['status'=>false,'msg'=>ModelHelper::getErrorAsString($message,$message->getErrors())];
            }
        }else{
            return ['status'=>false,'msg'=>\yii::t('app','Parameter Error')];
        }
    }

    public function actionMessageDetail(){
        return $this->render('message-detail');
    }
}