<?php
namespace frontend\widget;

use common\models\startdata\Tag;
use Yii;
use yii\caching\TagDependency;
use yii\helpers\Html;
use yii\helpers\Url;

/**
 * Created by Administrator.
 * Date: 2018/5/20 14:38
 * github: https://github.com/lbmzorx
 */
class TagWidget extends PanelWidget
{
    public $condition=[];
    public $ulOption=[];
    public $liOption=[];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if(empty($this->ulOption['class'])){
            $this->ulOption['class']='list-group';
        }
    }

    public function getHeadContent()
    {
        return Yii::t('app','Tag');//Html::tag('h3',Yii::t('app','Category'),['class'=>'panel-title']); // TODO: Change the autogenerated stub
    }

    public function getBodyContent()
    {
        $data=$this->getArticleCateData($this->condition);
        $str='';

        $labelClass=[
            'label label-info',
            'label label-primary',
            'label label-info',
            'label label-success',
            'label label-warning',
            'label label-danger',
        ];
        foreach ($data as $v){
            $this->liOption['class']=$labelClass[rand(0,5)].' size-'.rand(1,5);
            $str.=Html::a(Html::tag('span',Html::encode($v['name']),$this->liOption),['site/list','tag'=>$v['name']]);
        }

        return Html::tag('p',$str,$this->ulOption); // TODO: Change the autogenerated stub
    }


    public function getArticleCateData($condition){
        $cache=\yii::$app->cache;
        $key=serialize(['type'=>'articleCate',__METHOD__]);
        if($data=$cache->get($key)){
            return $data;
        }else{
            $data=Tag::find()->andFilterWhere($condition)->limit(20)->orderBy(['frequence'=>SORT_DESC,'id'=>SORT_DESC])->asArray()->all();
            $cache->set($key,$data,(3600*24*30+rand(1,600)),new TagDependency([
                'tags'=>Tag::CACHE_TAG,
            ]));
            return $data;
        }
    }
}