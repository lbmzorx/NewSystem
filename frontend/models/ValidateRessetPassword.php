<?php
namespace frontend\models;

use common\components\behavior\LimitEmail;
use common\components\helper\SignHelper;
use common\models\startdata\UrlCheck;
use common\models\user\User;
use lbmzorx\components\helper\ModelHelper;
use yii\base\Exception;
use yii\base\Model;
use Yii;
use yii\helpers\VarDumper;

/**
 * Signup form
 */
class ValidateRessetPassword extends Model
{
    public $date;
    public $expire;
    public $sign;
    public $type;

    private $_user;
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['date','expire','sign','type'],'required'],
            ['date', 'datetime',],
            ['expire', 'integer'],
            ['sign','string','max'=>100],
            ['type','string','max'=>50],
            ['type','in','range'=>['user-reset-password']],
            ['sign', 'exist', 'targetClass' =>'\common\models\startdata\UrlCheck','targetAttribute'=>'md5', 'message' =>\yii::t('app','The activated link is not\'t exist')],
        ];
    }

    /**
     * {@inheritdoc}
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'date'=>\yii::t('app','Date'),
            'expire'=>\yii::t('app','Expire'),
            'sign'=>\yii::t('app','Sign'),
            'type'=>\yii::t('app','Type'),
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     * @return array
     */
    public function behaviors()
    {
        return [
            'limit_email'=>[
                'class'=>LimitEmail::className(),
                'attribute'=>'email',
                'spaceBetweenMail'=>60,
            ],
        ];
    }

    /**
     * Verify Sign
     * @return bool
     */
    public function verifySign(){
        $urlCheck=UrlCheck::findOne(['md5'=>$this->sign,'status'=>[UrlCheck::STATUS_WAITING,UrlCheck::STATUS_CLICKED]]);

        if($urlCheck){
            $checkSign=SignHelper::signSecretKey([
                'date'=>$this->date,'type'=>'user-reset-password','expire'=>$urlCheck->expire_time],$urlCheck->auth_key,true,true);
            if($urlCheck->expire_time<time()){
                $urlCheck->status=UrlCheck::STATUS_USELESS;
                $urlCheck->save();
                $this->addError('expire',\yii::t('app','This url was expired!'));
                return false;
            }
            if($checkSign!=false && $checkSign['sign']==$this->sign){
                $db=User::getDb();
                $this->_user=$user=User::findOne(['id'=>$urlCheck->user_id]);
                if($user){
                    $t=$db->beginTransaction();
                    $user->status=User::STATUS_ACTIVE;
                    $urlCheck->num=1;

                    if($urlCheck->status==UrlCheck::STATUS_WAITING ||
                        ($urlCheck->status==UrlCheck::STATUS_CLICKED &&\yii::$app->request->post('password')=='')){
                        $urlCheck->status=UrlCheck::STATUS_CLICKED;
                    }else{
                        $urlCheck->status=UrlCheck::STATUS_USELESS;
                    }

                    if($user->save()&&$urlCheck->save()){
                        $t->commit();
                        return true;
                    }else{
                        $t->rollBack();
                        $this->addError('sign',ModelHelper::getErrorAsString($user,$user->getErrors()));
                    }
                    return false;
                }
            }
            $this->addError('sign',\yii::t('app','This url was invalid!'));
            return false;
        }
        $this->addError('sign',\yii::t('app','This url was invalid!'));
        return false;
    }

    public function getUser(){
        return $this->_user;
    }
}
