<?php
namespace frontend\models;

use common\components\behavior\LimitEmail;
use common\components\event\EmailEvent;
use common\components\helper\SignHelper;
use common\models\startdata\UrlCheck;
use Yii;
use yii\base\Model;
use common\models\user\User;
use yii\helpers\Url;

/**
 * Password reset request form
 */
class PasswordResetRequestForm extends Model
{
    public $email;
    public $verifyCode;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['email', 'trim'],
            ['email', 'required'],
            ['email', 'email'],
            ['email', 'exist',
                'targetClass' => '\common\models\user\User',
                'filter' => ['status' =>[ User::STATUS_ACTIVE, User::STATUS_WAITING_ACTIVE,]],
                'message' => 'There is no user with this email address.'
            ],
            ['verifyCode','captcha'],
        ];
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'email'=>\yii::t('app','Email'),
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            'limit_email'=>[
                'class'=>LimitEmail::className(),
                'attribute'=>'email',
                'spaceBetweenMail'=>60,
            ],
        ];
    }

    /**
     * Sends an email with a link, for resetting the password.
     *
     * @return bool whether the email was send
     */
    public function sendEmail()
    {
        if(preg_match('/^1[\d]{10}$/',$this->email)){
            $user = User::findOne([
                'status' =>[User::STATUS_ACTIVE,User::STATUS_WAITING_ACTIVE],
                'mobile' => $this->email,
            ]);
        }elseif(preg_match('/^[a-zA-Z0-9!#$%&\'*+\\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&\'*+\\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/',$this->email)){
            $user = User::findOne([
                'status' =>[User::STATUS_ACTIVE,User::STATUS_WAITING_ACTIVE],
                'email' => $this->email,
            ]);
        }else{
            $user = User::findOne([
                'status' =>[User::STATUS_ACTIVE,User::STATUS_WAITING_ACTIVE],
                'username' => $this->email,
            ]);
        }
        if (!$user) {
            var_dump('no user');
            return false;
        }
        if (!$user->status==User::STATUS_WAITING_ACTIVE) {
            \yii::$app->session->addFlash('info',\yii::t('app','You need activate you account first!'));
            \Yii::$app->response->redirect('site/activate');
            return false;
        }
        if (!User::isPasswordResetTokenValid($user->password_reset_token)) {
            $user->generatePasswordResetToken();
            if (!$user->save()) {
                return false;
            }
        }

        $emailEvent=new EmailEvent();
        $this->trigger(EmailEvent::EVENT_BEFORE_EMAIL,$emailEvent);
        $token=$user->generatePasswordResetToken();
        $linkParams=SignHelper::signSecretKey(['type'=>'user-reset-password','expire'=>strtotime('+1 day')],$token,true,true);
        if($linkParams!=false){
            array_unshift($linkParams,'site/reset-password');
            $link=Url::to($linkParams,true);
            $urlCheck=new UrlCheck();
            $urlCheck->setScenario('create');
            $urlCheck->url=$link;
            $urlCheck->md5=$linkParams['sign'];
            $urlCheck->user_id=$user->id;
            $urlCheck->expire_time=strtotime('+1 day');
            $urlCheck->status=UrlCheck::STATUS_WAITING;
            $urlCheck->auth_key=$token;
            if($urlCheck->save()){
                $mail= Yii::$app
                    ->mailer
                    ->compose(
                        ['html' => 'passwordResetToken-html', 'text' => 'passwordResetToken-text'],
                        [
                            'user' => $user,
                            'link'=>$link,
                            'expire'=>$urlCheck->expire_time,
                        ]
                    )
                    ->setFrom(Yii::$app->params['supportEmail'])
                    ->setTo($this->email)
                    ->setSubject(\yii::t('app','Password reset for {app}',['app'=>Yii::$app->name]))
                    ->send();
                if($mail){
                    $this->trigger(EmailEvent::EVENT_SUCCESS_EMAIL,$emailEvent);
                }
                return $mail;
            }
        }
        $this->addError('email',Yii::t('app','Can\'t create email for activate you account , please checkout you email!'));
        return false;
    }
}
