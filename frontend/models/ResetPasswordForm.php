<?php
namespace frontend\models;

use lbmzorx\components\behavior\RsaAttribute;
use lbmzorx\components\helper\ModelHelper;
use yii\base\Model;
use yii\base\InvalidParamException;
use common\models\user\User;

/**
 * Password reset form
 */
class ResetPasswordForm extends Model
{
    public $password;

    /**
     * @var \common\models\user\User
     */
    private $_user;

    public function behaviors()
    {
        return [
            'bs_rsa'=>[
                'class'=>RsaAttribute::className(),
                'rsaAtAttributes'=>['password',],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['password', 'required'],
            [['password',], 'string', 'min' => 8,'max'=>25],
            [ 'password','match','pattern'=>'/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,25}$/','message'=>\yii::t('app','Password must include number,lowercase letters,and uppercase letters')],
        ];
    }

    public function checkUrl($date,$expire,$type,$sign){
        if( empty($date) || !is_numeric($expire)|| empty($sign) || !is_string($sign)) {
            throw new InvalidParamException('Password reset token cannot be blank.');
        }
        $validate=new ValidateRessetPassword();
        if($validate->load(['date'=>$date,'expire'=>$expire,'type'=>$type,'sign'=>$sign],'') && $validate->validate() && $validate->verifySign()){
            $this->_user = $validate->getUser();
            if (!$this->_user) {
                throw new InvalidParamException(\yii::t('error','Wrong password reset token.'));
            }
            return true;
        }else{
            throw new InvalidParamException(\yii::t('error','Wrong password reset token.'));
        }
    }

    public function attributeLabels()
    {
        return [
            'password'=>\yii::t('app','Password'),
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * Resets password.
     *
     * @return bool if password was reset.
     */
    public function resetPassword()
    {
        $user = $this->_user;
        $user->setPassword($this->password);
        $user->removePasswordResetToken();

        return $user->save(false);
    }
}
